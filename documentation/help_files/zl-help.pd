#N canvas 521 72 558 534 10;
#X obj 2 229 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 2 347 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 82 236 cnv 17 3 84 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 82 355 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 82 325 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 82 376 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 199 205 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 2 4 cnv 15 553 42 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 554 42 1;
#X restore 2 3 graph;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#X obj 199 181 cyclone/zl len;
#X text 119 249 anything;
#X text 91 263 mode <symbol>;
#X text 178 249 - one or more element messages to be processed;
#X text 119 324 anything;
#X text 119 375 anything;
#X text 119 354 anything;
#X text 91 306 zlmaxsize <f>;
#X obj 2 401 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 2 509 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X text 170 425 -;
#X text 170 407 -;
#X text 112 407 1) float;
#X text 112 425 1) symbol;
#X obj 2 479 cnv 3 550 3 empty empty attributes 8 12 0 13 -228856 -1
0;
#N canvas 0 22 450 300 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 304 3 graph;
#X msg 242 128 beep 1 2 3 4;
#X text 143 234 bang;
#X text 126 291 zlclear;
#N canvas 610 157 572 445 examples 0;
#X obj 91 118 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 178 230 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 19 30 You can set the size of the list with a first optional
float argument. If you don't \, then the first argument is a symbol
that specifies the mode type \, and the maximum size is the default:
256 elements.;
#X text 205 121 back to default;
#X msg 210 140 zlmaxsize 256;
#X text 19 81 The maximum size is also set via the 'zlmaxsize' attribute
or message (and it can be up to 32767).;
#X obj 19 7 cyclone/comment 185 14 monaco ? 0 0 0 0 Basic:;
#X obj 453 47 cyclone/comment 185 14 monaco ? 0 0 0 0 Modes:;
#X obj 23 348 cyclone/comment 185 14 monaco ? 0 0 0 0 Inconsistency
;
#X text 24 373 In Max \, the zl family of objects can be instantiated
with the mode after a dot \, such as [zl.group]. But this is not possible
in Pd \, where the mode needs to be called as an argument after a space.
;
#X text 23 255 The mode argument is obrigatory and this means there
is no default mode. If you don't set a mode as an argument \, you have
to set it via the mode message.;
#X text 24 303 Check details about each mode in the subpatches on the
right. Modes introduced in the Max5+ versions are not implemented yet.
;
#X obj 178 203 cyclone/zl len;
#X obj 178 172 cyclone/zl len @maxzlsize 512;
#N canvas 728 59 406 428 ecils 0;
#X obj 22 8 comment 185 14 monaco ? 0 0 0 0 Mode: ecils;
#X obj 235 271 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 275 269 split point;
#X text 32 373 See also 'slice' mode;
#X obj 68 258 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 112 332 print ecils_Left;
#X obj 235 333 print ecils_Right;
#X msg 122 262 a b c d e f g h;
#X msg 112 237 1 2 3 4 5 6 7;
#X msg 90 207 mode ecils 4;
#X text 21 35 'ecils' is 'slice' backwards \, so it slices a list in
reverse order. You can set the split point with an argument or with
a float input into the right inlet \, but also when you set the mode
with the mode message. The default point is '0' \, which means no slicing.
;
#X obj 112 295 cyclone/zl ecils 3, f 21;
#X text 24 161 A bang performs the operation in the last received list.
;
#X text 22 111 If you slice at 'n' \, the left outlet spits the last
'n' elements and the right outlet sends the first sliced elements.
;
#X text 174 207 <= sets mode and argument;
#X connect 1 0 11 1;
#X connect 4 0 11 0;
#X connect 7 0 11 0;
#X connect 8 0 11 0;
#X connect 9 0 11 0;
#X connect 11 0 5 0;
#X connect 11 1 6 0;
#X restore 455 78 pd ecils;
#N canvas 893 197 409 470 group 0;
#X obj 268 274 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 24 18 comment 185 14 monaco ? 0 0 0 0 Mode: group;
#X obj 109 332 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 260 374 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 300 372 group size;
#X obj 149 397 cyclone/zl group 10;
#X floatatom 184 351 5 0 0 0 - - -, f 5;
#X msg 159 302 a b c d e f;
#X msg 171 325 g h i j k;
#X text 45 333 remainder;
#X obj 268 301 cyclone/uzi 24;
#X text 23 228 The right outlet is inactive.;
#X obj 149 424 print zl_group;
#X msg 149 268 mode group 4;
#X text 27 267 set mode & argument;
#X text 21 130 The input can have one or more elements \, when the
grouped elements reach the group size \, the grouped list is sent out
the left outlet. The remaining items are stored for next group.;
#X text 22 191 A bang message causes it to spit (and clear from the
memory) the remaining stored elements (at the set group size).;
#X text 22 44 The group mode aggroups 'n' elements into a list \, where
'n' cannot be higher than the maximum zl size. You can set 'n' (the
group size) with an argument or with a float input into the right inlet
\, but also when you set the mode with the mode message. The default
group size is the maximum zl size (and the minimum group size is 1).
;
#X connect 0 0 10 0;
#X connect 2 0 5 0;
#X connect 3 0 5 1;
#X connect 5 0 12 0;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 10 2 5 0;
#X connect 13 0 5 0;
#X restore 455 100 pd group;
#N canvas 753 249 463 451 iter 0;
#X msg 171 278 1 2 3 4 5 6;
#X msg 153 250 mode iter 4;
#X obj 153 384 print iter;
#X obj 24 18 comment 185 14 monaco ? 0 0 0 0 Mode: iter;
#X text 23 49 The iter mode breaks an input list in to sucessive lists
of a given size. If an input list is smaller than the iter size \,
the lista is output anyway - if the last bit of the broken list is
of a size smaller than the iter size \, it is also output.;
#X obj 113 281 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X floatatom 196 327 5 0 0 0 - - -, f 5;
#X obj 252 334 nbx 3 14 1 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 1 256;
#X text 292 332 iter size;
#X text 23 121 The iter size can be set with an argument or with a
float input into the right inlet \, but also when you set the mode
with the mode message. The minimum iter size is 1 and the default is
'0' \, which means nothing happens.;
#X text 24 202 The right outlet is inactive.;
#X msg 182 303 one two three four five six;
#X obj 153 359 cyclone/zl iter 1;
#X text 24 182 A bang performs the operation in the last received list.
;
#X text 231 249 <= sets mode and argument;
#X connect 0 0 12 0;
#X connect 1 0 12 0;
#X connect 5 0 12 0;
#X connect 6 0 12 0;
#X connect 7 0 12 1;
#X connect 11 0 12 0;
#X connect 12 0 2 0;
#X restore 455 122 pd iter;
#N canvas 919 115 425 306 join 0;
#X obj 32 18 comment 185 14 monaco ? 0 0 0 0 Mode: join;
#X obj 156 263 print zl_join;
#X obj 101 161 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X text 49 160 resends;
#X msg 129 140 mode join a b;
#X text 31 49 The join mode joins two lists sent to each inlet (things
in list 2 that are in list 1 are duplicated). A bang resends the last
output or outputs a new list if the right inlet received something
new. Subsequent arguments initialize the right list. The right outlet
is inactive.;
#X obj 156 220 cyclone/zl join 4 5 6;
#X msg 279 181 x y z;
#X msg 156 180 1 2 3;
#X text 215 139 <= sets mode and arguments;
#X connect 2 0 6 0;
#X connect 4 0 6 0;
#X connect 6 0 1 0;
#X connect 7 0 6 1;
#X connect 8 0 6 0;
#X restore 455 144 pd join;
#N canvas 781 151 405 384 len 0;
#X msg 154 178 this produces 3;
#X msg 165 210 and this should be five;
#X obj 130 277 cyclone/zl len;
#X msg 130 147 list two elements;
#X obj 130 313 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 71 213 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 130 341 print zl_len;
#X obj 25 17 comment 185 14 monaco ? 0 0 0 0 Mode: len;
#X msg 105 118 mode len;
#X msg 175 243 1 2 3 4 5 6 7 8 9 10 11 12 13 14;
#X text 163 117 <= sets mode;
#X text 20 213 resends;
#X text 24 47 The len mode outputs how many elements a lista has. A
bang resends the last output. This mode has no arguments. The right
inlet/outlet are inactive.;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 5 0 2 0;
#X connect 8 0 2 0;
#X connect 9 0 2 0;
#X restore 455 166 pd len;
#N canvas 573 172 789 398 mth 0;
#X obj 75 247 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 451 210 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 25 8 comment 185 14 monaco ? 0 0 0 0 Mode: mth;
#X msg 117 239 1 2 3 4 5 6 7 8 9 10;
#X obj 210 273 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 72 338 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 25 162 A bang performs the operation in the last received list.
;
#X msg 504 190 1 2 3 4 5 6 7 8 9 10;
#X obj 440 291 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 421 72 The element that replaces the mth element in the right
outlet is set as the 2nd argument. This is optional \, no second argument
(the default) does not replace the mth element by anything.;
#X obj 595 290 print replaced_mth;
#X obj 484 290 print mth;
#X text 638 219 mth / replacement;
#X text 250 272 mth;
#X obj 210 335 print not_the_mth;
#X obj 117 335 print mth;
#X obj 117 301 cyclone/zl mth 3;
#X obj 484 254 cyclone/zl mth 2 hi;
#X msg 484 162 mode mth 3 hello;
#X msg 595 219 6 bye;
#X text 24 36 The mode mth is the same as mth but starts counting from
0 instead. It outputs the mth element of a message through the left
outlet. The right outlet outputs the remaining elements \, but the
output can also replace the mth element by another.;
#X text 24 100 The mth element is set as the 1st argument. The 1st
element is treated as "0 '(the default). If you set the mth to a number
greater than the input list \, all the elements are sent to the right
outlet \, the same happens for negative mth values.;
#X msg 96 199 mode mth 5;
#X connect 0 0 16 0;
#X connect 1 0 17 0;
#X connect 3 0 16 0;
#X connect 4 0 16 1;
#X connect 7 0 17 0;
#X connect 16 0 5 0;
#X connect 16 0 15 0;
#X connect 16 1 14 0;
#X connect 17 0 8 0;
#X connect 17 0 11 0;
#X connect 17 1 10 0;
#X connect 18 0 17 0;
#X connect 19 0 17 1;
#X connect 22 0 16 0;
#X restore 455 188 pd mth;
#N canvas 426 244 812 412 nth 0;
#X obj 127 343 print nth;
#X obj 504 280 print nth;
#X obj 85 255 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 471 200 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 25 8 comment 185 14 monaco ? 0 0 0 0 Mode: nth;
#X msg 127 247 1 2 3 4 5 6 7 8 9 10;
#X obj 220 281 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 260 280 nth;
#X obj 82 346 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 127 309 cyclone/zl nth 3;
#X text 25 165 A bang performs the operation in the last received list.
;
#X obj 220 343 print not_the_nth;
#X obj 615 280 print replaced_nth;
#X obj 504 244 cyclone/zl nth 2 hi;
#X msg 524 180 1 2 3 4 5 6 7 8 9 10;
#X text 421 72 The element that replaces the nth element in the right
outlet is set as the 2nd argument. This is optional \, no second argument
(the defaukt) does not replace the nth element by anything.;
#X obj 460 281 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 654 209 nth / replacement;
#X msg 504 152 mode nth 3 hello;
#X text 24 36 The mode nth is the same as mth but starts counting from
1 instead. It outputs the nth element of a message through the left
outlet. The right outlet outputs the remaining elements \, but the
output can also replace the nth element by another., f 61;
#X text 23 103 The nth element is set as the 1st argument. The 1st
element is treated as "1" \, if you set it as 0 (the default) or to
a number greater than the input list \, all the elements are sent to
the right outlet and nothing is sent via the left outlet., f 61;
#X text 185 205 <= sets mode and arguments;
#X msg 109 206 mode nth 8;
#X msg 615 209 0 bye;
#X connect 2 0 9 0;
#X connect 3 0 13 0;
#X connect 5 0 9 0;
#X connect 6 0 9 1;
#X connect 9 0 0 0;
#X connect 9 0 8 0;
#X connect 9 1 11 0;
#X connect 13 0 1 0;
#X connect 13 0 16 0;
#X connect 13 1 12 0;
#X connect 14 0 13 0;
#X connect 18 0 13 0;
#X connect 22 0 9 0;
#X connect 23 0 13 1;
#X restore 455 210 pd nth;
#N canvas 786 294 430 326 reg 0;
#X obj 69 280 print reg;
#X obj 111 216 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X msg 306 186 this is stored;
#X msg 91 187 this is stored and sent;
#X msg 69 155 1 2 3 4;
#X msg 287 155 5 6 7 8;
#X text 136 218 <= outputs stored list;
#X msg 38 124 mode reg one two;
#X text 145 123 <= sets mode and arguments;
#X text 30 44 The reg mode stores lists. The initially stored list
is set as an argument and changed in the right inlet. The left inlet
stores and outputs the list. A bang sends the last stored list. The
right outlet is inactive.;
#X obj 33 17 comment 185 14 monaco ? 0 0 0 0 Mode: reg;
#X obj 69 245 cyclone/zl reg initially stored elements;
#X connect 1 0 11 0;
#X connect 2 0 11 1;
#X connect 3 0 11 0;
#X connect 4 0 11 0;
#X connect 5 0 11 1;
#X connect 7 0 11 0;
#X connect 11 0 0 0;
#X restore 455 232 pd reg;
#N canvas 865 220 418 288 rev 0;
#X msg 137 130 way this something means this;
#X obj 26 7 comment 185 14 monaco ? 0 0 0 0 Mode: rev;
#X obj 81 135 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 25 38 The rev mode reverses the elements of a list. A bang
resends the last output. This mode has no arguments. The right inlet/outlet
are inactive.;
#X msg 148 157 1 2 3 4 5 6 7 8 9 10;
#X obj 117 237 print zl_rev;
#X msg 117 95 mode rev;
#X text 178 94 <= sets mode;
#X obj 117 192 cyclone/zl rev;
#X connect 0 0 8 0;
#X connect 2 0 8 0;
#X connect 4 0 8 0;
#X connect 6 0 8 0;
#X connect 8 0 5 0;
#X restore 455 254 pd rev;
#N canvas 842 204 407 413 rot 0;
#X msg 122 246 sometimes my grammar is all messed up;
#X obj 102 334 cyclone/zl rot 3;
#X obj 195 309 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 17 7 comment 185 14 monaco ? 0 0 0 0 Mode: rot;
#X obj 63 289 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 18 156 A bang performs the operation in the last received list.
;
#X text 18 176 The right outlet is inactive.;
#X obj 102 373 print zl_rot;
#X text 17 35 The mode rot does rotate a list. If the rotation point
is a positive number 'n' \, the list is shifted to the right by 'n'
positions \, and the last 'n' elements are placed at the list start.
If 'n' is negative \, the rotation happens at the other direction.
;
#X text 18 99 You can set the rotation point with an argument or with
a float input into the right inlet \, but also when you set the mode
with the mode message. The default point is '0' \, which means no rotation.
;
#X msg 146 276 1 2 3 4 5 6 7 8 9 10 11 12;
#X msg 102 217 mode rot -3;
#X text 179 217 <= sets mode and argument;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 1 1;
#X connect 4 0 1 0;
#X connect 10 0 1 0;
#X connect 11 0 1 0;
#X restore 455 276 pd rot;
#N canvas 949 241 424 357 sect 0;
#X obj 59 211 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 223 296 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X text 238 312 no common elements;
#X text 244 298 bang if there are;
#X obj 82 297 print zl_sect;
#X msg 223 208 1 5 10 15 20;
#X obj 20 7 comment 185 14 monaco ? 0 0 0 0 Mode: sect;
#X msg 82 182 mode sect 3 6 9;
#X text 18 35 The mode sect outputs the elements of an input list that
are in common to another list (set as an argument or via the right
inlet). The default is an empty list.;
#X text 19 82 The right outlet outputs a bang if there are no matching
elements.;
#X text 19 117 A bang performs the operation in the last received list
into the left inlet.;
#X msg 90 237 1 2 3 4 5 6 7 8 9 10;
#X msg 243 234 0 100 1000;
#X obj 82 265 cyclone/zl sect 1 10 100;
#X text 182 182 <= sets mode and arguments;
#X connect 0 0 13 0;
#X connect 5 0 13 1;
#X connect 7 0 13 0;
#X connect 11 0 13 0;
#X connect 12 0 13 1;
#X connect 13 0 4 0;
#X connect 13 1 1 0;
#X restore 455 299 pd sect;
#N canvas 824 23 415 398 slice 0;
#X obj 22 8 comment 185 14 monaco ? 0 0 0 0 Mode: slice;
#X obj 235 251 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 275 249 split point;
#X obj 68 238 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X msg 122 242 a b c d e f g h;
#X msg 112 217 1 2 3 4 5 6 7;
#X text 24 141 A bang performs the operation in the last received list.
;
#X text 32 353 See also 'ecils' mode;
#X text 21 35 The slice mode slices a list. You can set the split point
with an argument or with a float input into the right inlet \, but
also when you set the mode with the mode message. The default point
is '0' \, which means no slicing.;
#X msg 90 187 mode slice 4;
#X obj 112 275 cyclone/zl slice 3, f 21;
#X obj 112 312 print slice_Left;
#X obj 235 313 print slice_Right;
#X text 22 101 If you slice at 'n' \, the left outlet spits the first
'n' elements and the right outlet sends the remaining elements.;
#X text 174 187 <= sets mode and argument;
#X connect 1 0 10 1;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 5 0 10 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 12 0;
#X restore 455 321 pd slice;
#N canvas 889 66 405 323 sub 0;
#X obj 73 171 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X msg 199 199 11;
#X msg 235 199 7 8 9;
#X obj 20 14 comment 185 14 monaco ? 0 0 0 0 Mode: sub;
#X msg 164 199 1;
#X obj 106 234 cyclone/zl sub 1;
#X obj 199 268 print occurances;
#X msg 120 172 1 2 3 7 8 9 4 5 6 7 8 9 1;
#X obj 106 268 print position;
#X text 18 42 the sub mode searches for occurances of the element(s)
of the second list to the first list and outputs the number of occurances
in the right outlet and the position of such occurances in the left
outlet. If no occurance is found \, the right outlet outputs 0 and
nothing is output on the left outlet. Subsequent arguments initialize
the right list.;
#X msg 106 138 mode sub 5;
#X text 177 138 <= sets mode and arguments;
#X connect 0 0 5 0;
#X connect 1 0 5 1;
#X connect 2 0 5 1;
#X connect 4 0 5 1;
#X connect 5 0 8 0;
#X connect 5 1 6 0;
#X connect 7 0 5 0;
#X connect 10 0 5 0;
#X restore 455 345 pd sub;
#N canvas 861 239 409 254 union 0;
#X obj 62 126 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 20 12 comment 185 14 monaco ? 0 0 0 0 Mode: union;
#X obj 105 208 print zl_union;
#X text 21 39 union the stuff in two lists (but does not duplicate
things in list 2 that are in list 1). Subsequent arguments initialize
the right list. The right outlet is inactive.;
#X msg 234 133 6.5 4 2.3 2 2 8 hi;
#X msg 119 129 2.3 7 6.5 hi;
#X msg 105 100 mode union a b;
#X text 201 99 <= sets mode and arguments;
#X obj 105 171 cyclone/zl union 10 20;
#X connect 0 0 8 0;
#X connect 4 0 8 1;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 8 0 2 0;
#X restore 455 367 pd union;
#X obj 91 145 cyclone/uzi 512;
#X connect 0 0 28 0;
#X connect 4 0 12 0;
#X connect 4 0 13 0;
#X connect 12 0 1 0;
#X connect 13 0 12 0;
#X connect 28 2 13 0;
#X restore 475 202 pd examples;
#X text 178 356 - output according to the mode: see details in [pd
examples];
#X text 178 375 - output according to the mode: see details in [pd
examples];
#X obj 166 127 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 247 153 zlclear;
#X text 114 126 resends;
#X text 117 141 length;
#X text 178 324 - depends on the mode \, see [pd examples];
#N canvas 760 484 463 278 subsequent_arguments 0;
#X text 22 76 group;
#X text 28 91 iter;
#X text 34 122 mth;
#X text 34 152 reg;
#X text 28 183 sect;
#X text 22 198 slice;
#X text 34 167 rot;
#X text 22 62 ecils;
#X text 34 137 nth;
#X text 61 122 - float: the element position counting from 0 (default
0), f 62;
#X text 61 152 - anything: stored elements (default none), f 62;
#X text 34 216 sub;
#X text 61 216 - anything: elements to look for (default none), f
62;
#X text 61 76 - float: length of the grouped list (default is zlmaxsize)
, f 62;
#X text 61 137 - float: the element position counting from 1 (default
0), f 62;
#X text 61 167 - float: number to rotate to (default 0), f 62;
#X text 61 198 - float: position to slice the list (default 0), f
62;
#X text 61 62 - float: position to slice the list (default 0), f 62
;
#X text 61 183 - anything: to compare with left input (default none)
, f 62;
#X text 61 91 - float: length of output list (default 0), f 62;
#X text 22 231 union;
#X text 61 231 - anything: elements to union to the first list (default
none), f 62;
#X text 28 107 join;
#X text 61 107 - anything: elements to join to the first list (default
none), f 62;
#X text 47 13 The modes len & rev don't have arguments. The other modes
can have subsequent arguments as below. See also [pd examples] for
more details on how they work., f 62;
#X restore 297 454 pd subsequent_arguments;
#X text 178 264 -;
#X text 190 263 sets mode (you can also set subsequent arguments) -
check [pd examples] for more info;
#X text 70 85 [zl] processes messages with one or more elements ("list
messages' or "anything") according to a mode (set via argument/message).
, f 66;
#X obj 17 57 cyclone/comment 0 18 times ? 0 0 0 0 List processor;
#X obj 16 4 cyclone/comment 0 37 times ? 0 0 0 0 zl;
#X obj 322 28 cyclone/comment 0 13 courier ? 0 224 228 220 Objects
cloned from Max/MSP;
#X obj 363 4 cyclone/comment 0 24 courier ? 0 224 228 220 cyclone;
#X text 184 425 mode (ecils \, group \, iter \, join \, len \, mth
\, nth \, reg \, rev \, rot \, sect \, slice \, sub or union). Modes
can have subsequent arguments \, check:;
#X text 178 306 - sets maximum list size (from 1 to 32767);
#X text 234 205 <= number of elements in a message;
#X text 293 181 length mode;
#X text 184 407 optional: maximum list size (1 - 32767 \, default 256)
;
#X text 129 486 @zlmaxsize <float> - max list size (1 - 32767 \, default
256), f 62;
#X text 178 291 - clears mode's arguments and received data in both
inlets;
#X obj 199 129 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 178 234 - mode dependant operation on current data see [pd
examples];
#X text 298 153 clears loaded data;
#X connect 10 0 6 0;
#X connect 26 0 10 0;
#X connect 32 0 10 0;
#X connect 33 0 10 0;
#X connect 52 0 10 0;
