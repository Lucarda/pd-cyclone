#N canvas 789 72 558 461 10;
#X obj 4 296 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 4 352 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 4 392 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 90 307 cnv 17 3 38 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 90 365 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 147 400 (none);
#X obj 212 253 print;
#X obj 212 226 cyclone/iter;
#X obj 3 421 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X text 159 308 bang;
#X text 111 365 float/symbol;
#X text 135 327 anything;
#X text 196 308 - outputs the last received input as sequential elements
;
#X text 196 327 - split elements sequentially;
#X msg 181 145 1 2 three;
#X msg 212 171 list one two 3;
#X msg 232 198 any message type;
#X text 196 365 - according to the input element \, in sequential order
;
#X obj 66 256 print;
#X obj 38 180 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 66 150 loadbang;
#X msg 66 180 1 2 3;
#X obj 66 224 cyclone/iter;
#X text 70 92 [iter] is similar to [unnpack] \, it splits a message
(to floats/symbols) but outputs them sequentially in the given order.
;
#X msg 389 163 60 63 67;
#X obj 389 191 cyclone/iter;
#X obj 389 225 makenote 64 500;
#X obj 429 257 noteout;
#X text 380 141 a chord from list;
#X obj 3 3 cnv 15 301 42 empty empty iter 20 20 2 37 -233017 -1 0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 374 11 cnv 10 10 10 empty empty cyclone 0 5 2 24 -128992 -233080
0;
#X obj 340 29 cnv 10 10 10 empty empty Objects 0 6 2 13 -128992 -233080
0;
#X obj 395 29 cnv 10 10 10 empty empty cloned 0 6 2 13 -128992 -233080
0;
#X obj 441 29 cnv 10 10 10 empty empty from 0 6 2 13 -128992 -233080
0;
#X obj 474 30 cnv 10 10 10 empty empty Max/MSP 0 6 2 13 -128992 -233080
0;
#X text 30 68 Split messages sequentially;
#X connect 7 0 6 0;
#X connect 14 0 7 0;
#X connect 15 0 7 0;
#X connect 16 0 7 0;
#X connect 19 0 22 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 18 0;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 26 1 27 1;
