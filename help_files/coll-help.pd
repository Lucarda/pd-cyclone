#N canvas 575 23 558 587 10;
#X obj 2 285 cnv 3 550 3 empty empty inlets 8 12 0 13 -220534 -1 0
;
#X obj 2 367 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 2 455 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 76 394 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 76 414 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X obj 76 434 cnv 17 3 17 empty empty 3 5 9 0 16 -228856 -162280 0
;
#X obj 76 374 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 76 292 cnv 17 3 70 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 2 549 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X text 173 463 -;
#X text 173 492 -;
#X text 101 493 2) float;
#X text 141 292 -;
#X text 108 292 bang;
#X text 141 325 -;
#X text 141 342 -;
#X text 123 414 bang;
#X text 123 434 bang;
#X obj 2 5 cnv 15 553 42 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 554 42 1 0 0;
#X restore 2 4 graph;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X obj 322 29 comment 0 13 courier ? 0 224 228 220 Objects cloned from
Max/MSP;
#X obj 363 5 comment 0 24 courier ? 0 224 228 220 cyclone;
#X obj 16 5 comment 0 37 times ? 0 0 0 0 coll;
#X obj 17 58 comment 0 18 times ? 0 0 0 0 Store/edit collections of
messages;
#X text 101 463 1) symbol;
#N canvas 578 23 643 638 All_Messages 0;
#X text 179 18 erases all data collection, f 76;
#X text 127 18 clear -;
#X text 133 66 dump -;
#X text 179 82 sets the pointer to the last address, f 76;
#X text 139 82 end -;
#X text 55 114 filetype <symbol> -;
#X text 121 194 length -;
#X text 139 210 max -;
#X text 179 210 sends the highest numerical value to left outlet,
f 76;
#X text 139 242 min -;
#X text 179 242 sends the lowest numerical value to the left outlet
, f 76;
#X text 133 258 next -;
#X text 61 274 nth <f/s \, float> -;
#X text 133 321 open -;
#X text 179 321 opens a window containing the data collection, f 76
;
#X text 133 337 prev -;
#X text 79 353 read <symbol> -;
#X text 103 369 readagain -;
#X text 73 385 refer <symbol> -;
#X text 126 504 start -;
#X text 179 504 sets the address pointer to the first value, f 76
;
#X text 18 552 subsym <symbol \, symbol> -;
#X text 120 583 wclose -;
#X text 179 584 closes the data window containing the collection,
f 76;
#X text 72 599 write <symbol> -;
#X text 96 615 writeagain -;
#X text 179 353 opens file specified by the symbol (without a symbol
\, a dialog window opens), f 76;
#X text 179 385 refers to the data from another [coll] object with
the symbol name, f 76;
#X text 42 475 sort <float \, float> -;
#X text 30 520 store <f/s \, anything> -;
#X text 179 599 saves file specified by the symbol (without a symbol
\, a dialog window opens), f 76;
#X text 179 552 substitutes an address symbol (2nd element) by the
first given symbol, f 76;
#X text 61 415 renumber <float> -;
#X text 179 415 makes the list of numeric addresses consecutive. An
optional float argument specifies a starting address, f 76;
#X text 79 130 flags <float> -;
#X text 179 130 <1> saves contents whith the patch \, <0> doesn't \,
same as embed attribute, f 76;
#X text 79 98 embed <float> -;
#X text 179 2 associates a symbol alias for an int address, f 76;
#X text 43 2 assoc <symbol \, int> -;
#X text 179 34 desassociates the symbol alias for an int address,
f 76;
#X text 31 34 deassoc <symbol \, int> -;
#X text 179 66 dumps all values (1st outlet) \, addresses (2nd) and
bangs (4th) when done, f 76;
#X text 25 162 insert <int \, anything> -;
#X text 179 114 sets file type to read/writte (no symbol restores to
default), f 76;
#X text 19 226 merge <int/symbol \, any> -;
#X text 179 258 same as bang: outputs next address and its data, f
76;
#X text 179 337 outputs previous address and its data, f 76;
#X text 179 369 reopen last file - if no file had been open \, a dialog
box is shown, f 76;
#X text 43 400 remove <int/symbol> -;
#X text 179 615 resaves last file - if no file had been saved \, a
dialog box is shown, f 76;
#X text 72 460 separate <int> -;
#X text 179 459 increments indices the given int address (opening a
slot), f 76;
#X text 179 536 same as nsub \, but the substituted message is sent
out, f 76;
#X text 179 178 same as insert \, but only increments if necessary
to include the new address, f 76;
#X text 19 178 insert2 <int \, anything> -;
#X text 7 290 nstore <int \, symbol \, any> -;
#X text 18 568 swap <int/sym \, int/sym> -;
#X text 179 568 swaps addresses. The data is unchanged \, only the
indexes are swapped, f 76;
#X text 102 443 renumber2 -;
#X text 179 443 increment addresses by one, f 76;
#X text 179 475 1st float is the sort flag (-1: ascending / 1: descending)
\, the 2nd is the element used to sort starting from 0 (-1 sorts by
address), f 76;
#X text 61 146 goto <int/float> -;
#X text 179 146 sets an address to go to (only sets the pointer \,
no output), f 76;
#X text 43 50 delete <int/symbol> -;
#X text 179 50 deletes address (if an int address \, higher addresses
are decremented by 1), f 76;
#X text 37 305 nsub <f/s \, int \, f/s> -;
#X text 42 536 sub <f/s \, int \, f/s> -;
#X text 179 290 or <symbol \, int \, any> - stores any data to an int
address with symbol alias, f 76;
#X text 179 274 address and nth element to be output (from 0?), f
76;
#X text 179 98 <1> saves contents whith the patch \, <0> doesn't -
same as 'flags', f 76;
#X text 179 162 address and message to be inserted (increments addresses
equal or greater), f 76;
#X text 179 193 sends number of stored values to the left outlet,
f 76;
#X text 179 226 address and any message to be appended to the stored
message, f 76;
#X text 179 306 the address \, element number (starting at 1) and value
to substitute it to, f 76;
#X text 179 400 removes address and its data without renumbering,
f 76;
#X text 179 520 <address> and <any message> to be stored, f 76;
#X restore 334 343 pd All_Messages;
#X text 83 342 messages;
#X obj 269 191 vradio 15 1 0 2 empty empty empty 0 -8 0 10 -228856
-1 -1 0;
#X obj 225 256 print;
#X obj 269 258 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 285 191 0;
#X text 285 206 1;
#X text 99 375 anything;
#X obj 2 517 cnv 3 550 3 empty empty attributes 8 12 0 13 -228856 -1
0;
#X text 301 258 <= address;
#X obj 214 201 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 142 525 @embed: <1> save contents with the patch \, <0> don't
save;
#X text 161 414 - when finishing load/save operations, f 51;
#X text 161 434 - when finishing a dump operation, f 51;
#X text 185 493 non-0 prevents from searching for a file (default)
;
#X text 185 463 optional: sets name (objects with the same name share
contents) or file name (searches for a file to open);
#X text 141 144 click messages \; & store data ==>;
#X text 134 257 stored data =>;
#X text 337 141 list stored at address "0";
#X text 337 166 list stored at address "1";
#X text 93 308 address -;
#X text 107 325 list;
#X text 156 325 stores data at the address specified by the 1st integer
element, f 64;
#X text 156 309 an "integer float" or a "symbol": outputs the stored
data, f 64;
#X text 59 231 click to open text window ==>;
#X text 65 83 [coll] stores/edits any messages at addresses (an integer
or a symbol). If an input list starts with an int \, it stores the
other element(s) at that int address.;
#X text 105 394 address;
#X text 161 394 - interger or symbol address of the stored message
, f 62;
#X text 161 375 - the stored message at a given address, f 51;
#X text 156 342 open to check all messages =>;
#X msg 246 141 0 500 1000 hi;
#X msg 256 165 1 5 10 hello;
#X text 84 201 go to next address =>;
#X obj 246 231 cyclone/coll;
#C restore;
#X text 156 292 outputs next address and its data, f 64;
#N canvas 361 184 1192 574 basic 0;
#X obj 27 260 loadbang;
#X obj 27 386 cyclone/coll example1;
#C restore;
#X obj 198 322 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 198 292 cyclone/coll example1;
#C restore;
#X obj 243 322 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 198 236 dump;
#X obj 321 318 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 321 342 print dump_done;
#X obj 198 379 print data/address;
#X obj 198 349 pack f f;
#X msg 216 264 clear;
#X msg 44 340 dump;
#X obj 27 419 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 72 419 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 150 415 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 150 439 print dump_done;
#X obj 27 476 print data/address;
#X obj 27 446 pack f f;
#X msg 86 343 open;
#X msg 131 346 wclose;
#X text 28 11 The same collection of data can be shared and accessed
or manipulated by different instances of the [coll] object if they
share the same name (1st symbol argument);
#X msg 27 292 0 0 \, 1 1 \, 2 2 \, 3 3 \, 4 4 \, 5 5, f 15;
#X text 29 104 A dump message spits all stored data \, and then sends
a bang in the rightmost outlet. You can visualize the data by clicking
on the [coll] object and opening its editing window \, but also open
and close with the "open/wclose" messages.;
#X obj 270 472 cyclone/coll example1;
#C restore;
#X obj 270 413 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 270 440 6 \$1;
#X text 28 58 Below \, the [coll] in the left stores some data that
can be viewed and edited by the [coll] objects in the right \, because
they have the same name ('example1').;
#X text 259 264 <= clear the data;
#X text 310 435 adds value;
#X text 310 448 at address 6;
#X text 31 179 A clear message clears all data stored in the collection.
See how clearing the collection in one [coll] instance affects others
with the same name - same with adding messages.;
#X msg 597 229 write coll.txt;
#X obj 482 288 cyclone/coll coll.txt;
#C restore;
#X msg 570 151 read coll.txt;
#X msg 465 152 next;
#X msg 482 181 prev;
#X obj 482 317 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 619 511 cyclone/coll coll.txt;
#C restore;
#X msg 672 481 next;
#X msg 671 456 prev;
#X msg 579 177 readagain;
#X msg 609 250 writeagain;
#X msg 550 123 read;
#X obj 523 317 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 589 208 write;
#X obj 570 316 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 594 312 bang when finishing;
#X text 592 327 read/write operations;
#X obj 425 151 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 444 152 or;
#X obj 619 541 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 660 541 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 644 177 reopens file;
#X text 661 150 opens file;
#X text 582 123 opens dialog window to open file;
#X text 631 207 opens dialog window to save;
#X text 692 229 saves to file;
#X text 680 250 resaves to file;
#X text 428 13 You can also specify with an argument a filename for
[coll] to load when instantiated. You can read/write from an to other
files with the read/write messages.;
#X text 429 62 The basic navigation through [coll]'s data is with the
"next" (same as a bang) or "prev" messages that \, respectively \,
go to the next and previous address.;
#X msg 534 466 goto 50;
#X text 30 508 Please note that when you open the editing window of
[coll] that you can type in and delete data \, then close it and save
it. The format for each line is: "adrress \, data \; ";
#X msg 900 289 dump;
#X obj 949 418 print address;
#X obj 926 443 print value;
#X msg 926 320 refer example1;
#X msg 951 354 refer coll.txt;
#X obj 926 387 cyclone/coll;
#C restore;
#X text 816 226 The "refer" message can refer a [coll] object to a
data collection of another [coll] object with a particular name or
filename.;
#X msg 902 79 dump;
#X obj 947 147 print address;
#X obj 902 173 print value;
#X obj 902 117 cyclone/coll coll.txt 1;
#C restore;
#X text 812 16 An optional second nonzero argument prevents coll from
serching for a filename given by the first symbol argument - the default
is 0 (search for filename).;
#X text 813 489 Important: A [coll] object with no name or filename
argument will have its own sigle collection of data \, not sahred amongst
other [coll] objects that also have no names.;
#X msg 600 441 start;
#X msg 619 465 end;
#X text 448 356 The pointer to the address is set for all [coll] objects
with the same name or loaded filename. So navigating in the object
above affects the navigation of the object below. The "goto <address>"
message ses the pointer to an address \, "start" goes to 1st address
\, "end" goes to the last.;
#X text 470 446 goes to address 50;
#X connect 0 0 21 0;
#X connect 1 0 12 0;
#X connect 1 1 13 0;
#X connect 1 3 14 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 3 1 4 0;
#X connect 3 3 6 0;
#X connect 4 0 9 1;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 3 0;
#X connect 11 0 1 0;
#X connect 12 0 17 0;
#X connect 13 0 17 1;
#X connect 14 0 15 0;
#X connect 17 0 16 0;
#X connect 18 0 1 0;
#X connect 19 0 1 0;
#X connect 21 0 1 0;
#X connect 24 0 25 0;
#X connect 25 0 23 0;
#X connect 31 0 32 0;
#X connect 32 0 36 0;
#X connect 32 1 43 0;
#X connect 32 2 45 0;
#X connect 33 0 32 0;
#X connect 34 0 32 0;
#X connect 35 0 32 0;
#X connect 37 0 50 0;
#X connect 37 1 51 0;
#X connect 38 0 37 0;
#X connect 39 0 37 0;
#X connect 40 0 32 0;
#X connect 41 0 32 0;
#X connect 42 0 32 0;
#X connect 44 0 32 0;
#X connect 48 0 32 0;
#X connect 60 0 37 0;
#X connect 62 0 67 0;
#X connect 65 0 67 0;
#X connect 66 0 67 0;
#X connect 67 0 64 0;
#X connect 67 1 63 0;
#X connect 69 0 72 0;
#X connect 72 0 71 0;
#X connect 72 1 70 0;
#X connect 75 0 37 0;
#X connect 76 0 37 0;
#X restore 489 235 pd basic;
#N canvas 64 38 795 468 more 0;
#N canvas 461 114 430 337 find 0;
#X obj 142 164 cyclone/coll;
#C restore;
#X msg 174 99 max;
#X msg 208 100 min;
#X msg 128 45 store symbol one 2;
#X text 8 3 Find minimum and maximum values - only numeric;
#X obj 143 287 print value;
#X obj 166 266 print address;
#X msg 143 70 3 four \, 5 16 \, 71 8;
#X connect 0 0 5 0;
#X connect 0 1 6 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 7 0 0 0;
#X restore 496 182 pd find min max;
#N canvas 175 23 787 431 alias_address 0;
#X obj 126 272 cyclone/coll;
#C restore;
#X msg 28 208 1;
#X msg 58 208 2;
#X msg 71 149 1 foo \, 2 bar, f 6;
#X msg 126 101 assoc foo 1;
#X msg 138 122 deassoc foo 1;
#X msg 152 152 assoc bar 2;
#X msg 162 173 deassoc bar 2;
#X msg 173 206 foo;
#X msg 209 206 bar;
#X text 226 121 deassociates foo & 1;
#X text 202 99 associates foo & 1;
#X text 231 151 associates bar & 2;
#X text 251 173 deassociates bar & 2;
#X text 22 17 Use "assoc" and "deassoc" to associate and deassociate
a symbol alias to an int address \, so you can optionally use the symbol
name address instead of the int address.;
#X obj 71 125 loadbang;
#X msg 216 239 remove foo;
#X text 287 239 *;
#X text 35 369 * Once you have an associated alias \, you can perform
any operation using the alias insteas of the int \, such as removing
the address from the collection.;
#X obj 529 306 cyclone/coll;
#C restore;
#X obj 529 166 loadbang;
#X msg 559 235 one;
#X floatatom 529 363 5 0 0 0 - - -, f 5;
#X floatatom 149 300 3 0 0 0 - - -, f 3;
#X symbolatom 126 326 7 0 0 0 - - -, f 7;
#X text 123 77 click to associate / deassociate;
#X text 175 300 <= address is still an int;
#X text 253 315 not the alias;
#X text 71 324 data =>;
#X text 600 247 alias;
#X text 568 363 data;
#X text 407 44 The format in which the alias is saved inside the [coll]
object is: "<int> <alias> \, <data>".;
#X msg 529 191 nstore 1 one 1.1 \, nstore two 2 2.2, f 18;
#X msg 567 262 two;
#X text 406 83 You can store an int address with an alias with the
"nstore" message. The first two elements are the int address and the
alias \, and they can come in any order <int \, symbol> or <symbol
\, int> - the remaining element(s) set the stored data.;
#X floatatom 552 333 5 0 0 0 - - -, f 5;
#X text 592 332 address;
#X connect 0 0 24 0;
#X connect 0 1 23 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 15 0 3 0;
#X connect 16 0 0 0;
#X connect 19 0 22 0;
#X connect 19 1 35 0;
#X connect 20 0 32 0;
#X connect 21 0 19 0;
#X connect 32 0 19 0;
#X connect 33 0 19 0;
#X restore 490 85 pd alias_address;
#N canvas 236 59 822 466 insert/delete 0;
#X text 20 19 In [coll] \, any message type can be stored at a particular
address \, which can either an "integer float" (positive or negative)
or a symbol.;
#X text 19 68 If an input list starts with an int \, this first element
is treated as an address in which the other element(s) are stored.
Any message can be stored \, but single symbol atoms are stored as
a symbol message.;
#X obj 134 311 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 111 160 loadbang;
#X obj 130 233 hradio 15 1 0 5 empty empty empty 0 -8 0 10 -228856
-1 -1 4;
#X obj 130 254 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 111 284 cyclone/coll;
#C restore;
#X obj 111 335 print coll_data;
#X obj 71 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 116 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 161 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 206 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 111 185 0 0.1 \, 1 1 2 \, 2 list one two \, 3 hi \, 4 what's
up?, f 29;
#X obj 71 372 route float list symbol;
#X text 66 418 float;
#X text 113 418 list;
#X text 157 418 symbol;
#X text 202 418 anything;
#X text 164 254 <= address;
#X obj 446 143 loadbang;
#X obj 446 203 cyclone/coll;
#C restore;
#X obj 446 253 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 23 256;
#X msg 446 169 store -1 23 \, -1;
#X text 493 228 address;
#X text 416 19 You can also use the "store" message to store data at
a given adress. It is not necessary for storing at integer addresses
\, but it is needed if you want to store a message at a symbol address
;
#X obj 592 104 loadbang;
#X obj 592 274 cyclone/coll;
#C restore;
#X obj 592 324 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 592 138 store gain 0.5 \, store freq 440, f 16;
#X msg 617 210 symbol gain;
#X symbolatom 615 299 6 0 0 0 - - -, f 6;
#X floatatom 469 229 3 0 0 0 - - -, f 3;
#X text 481 254 data;
#X text 169 311 <= address;
#X msg 624 236 symbol freq;
#X text 621 191 addresses:;
#X text 660 299 <= address;
#X text 640 324 data;
#X text 423 367 In order to retrieve data stored at symbol address
\, you need to send a symbol message to [coll]. Symbol addresses are
also output as a symbol message with the symbol selector.;
#X connect 3 0 12 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 6 0 13 0;
#X connect 6 1 2 0;
#X connect 12 0 6 0;
#X connect 13 0 8 0;
#X connect 13 1 9 0;
#X connect 13 2 10 0;
#X connect 13 3 11 0;
#X connect 19 0 22 0;
#X connect 20 0 21 0;
#X connect 20 1 31 0;
#X connect 22 0 20 0;
#X connect 25 0 28 0;
#X connect 26 0 27 0;
#X connect 26 1 30 0;
#X connect 28 0 26 0;
#X connect 29 0 26 0;
#X connect 34 0 26 0;
#X restore 652 194 pd insert/delete;
#X text 484 38 More examples;
#N canvas 124 54 449 336 Messages_Sorted_By_Functions 0;
#X text 21 48 operates on complete collection;
#X text 21 55 -------------------------------;
#X text 21 67 clear;
#X text 21 79 dump;
#X text 21 91 end;
#X text 21 127 length;
#X text 21 139 next;
#X text 21 151 open;
#X text 21 163 prev;
#X text 21 175 read;
#X text 21 187 readagain;
#X text 21 211 start;
#X text 21 223 wclose;
#X text 21 247 writeagain;
#X text 234 48 operates on all address types;
#X text 234 55 -----------------------------;
#X text 21 269 operates on numeric values;
#X text 21 276 --------------------------;
#X text 21 291 max;
#X text 21 303 min;
#X text 231 195 operates on numeric addresseses;
#X text 231 202 -------------------------------;
#X text 231 279 operates on symbolic addresseses;
#X text 231 286 --------------------------------;
#X text 119 14 MESSAGES ORDERED BY FUNCTIONS:;
#X text 231 243 nstore;
#X text 231 216 assoc / deassoc;
#X text 231 229 delete / insert;
#X text 231 300 subsym;
#X text 21 103 filetype;
#X text 21 115 flags;
#X text 21 199 refer;
#X text 21 235 write;
#X text 234 81 merge;
#X text 234 69 goto;
#X text 234 93 nth;
#X text 234 105 remove;
#X text 234 117 renumber;
#X text 234 129 separate;
#X text 234 141 sort;
#X text 234 153 store;
#X text 234 166 swap;
#X text 234 179 sub;
#X text 231 257 renumber;
#X restore 420 307 pd Messages_Sorted_By_Functions;
#N canvas 136 49 1161 460 store/remove_messages 0;
#X text 20 19 In [coll] \, any message type can be stored at a particular
address \, which can either an "integer float" (positive or negative)
or a symbol.;
#X text 19 68 If an input list starts with an int \, this first element
is treated as an address in which the other element(s) are stored.
Any message can be stored \, but single symbol atoms are stored as
a symbol message.;
#X obj 134 311 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 111 160 loadbang;
#X obj 130 233 hradio 15 1 0 5 empty empty empty 0 -8 0 10 -228856
-1 -1 4;
#X obj 130 254 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 111 284 cyclone/coll;
#C restore;
#X obj 111 335 print coll_data;
#X obj 71 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 116 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 161 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 206 400 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 111 185 0 0.1 \, 1 1 2 \, 2 list one two \, 3 hi \, 4 what's
up?, f 29;
#X obj 71 372 route float list symbol;
#X text 66 418 float;
#X text 113 418 list;
#X text 157 418 symbol;
#X text 202 418 anything;
#X text 164 254 <= address;
#X obj 403 154 loadbang;
#X obj 403 214 cyclone/coll;
#C restore;
#X obj 403 264 nbx 2 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 23 256;
#X msg 403 180 store -1 23 \, -1;
#X text 450 239 address;
#X text 413 30 You can also use the "store" message to store data at
a given adress. It is not necessary for storing at integer addresses
\, but it is needed if you want to store a message at a symbol address
;
#X obj 549 100 loadbang;
#X obj 549 341 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 549 125 store gain 0.5 \, store freq 440, f 16;
#X msg 574 191 symbol gain;
#X symbolatom 572 316 6 0 0 0 - - -, f 6;
#X floatatom 426 240 3 0 0 0 - - -, f 3;
#X text 438 265 data;
#X text 169 311 <= address;
#X msg 591 237 symbol freq;
#X text 578 172 addresses:;
#X text 597 341 data;
#X obj 523 245 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 549 291 cyclone/coll;
#C restore;
#X obj 876 181 loadbang;
#X msg 894 273 dump;
#X obj 876 335 cyclone/coll;
#C restore;
#X msg 958 302 remove note;
#X text 780 101 To remove a data message from [coll] \, use the remove
message. It removes the address specified by an int/symbol along with
its data.;
#X msg 876 206 store 1 0.1 \, 2 3 \, store velocity 127 \, store note
60, f 19;
#X msg 950 277 remove 1;
#X obj 876 387 print coll_data;
#X obj 899 361 print coll_address;
#X msg 583 212 gain;
#X msg 603 260 freq;
#X text 616 212 works without symbol selector;
#X text 617 316 <= address *;
#X text 412 376 * The symbol address input has an optional symbol selector
\, but it is output as a symbol message with the symbol selector.;
#X connect 3 0 12 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 6 0 13 0;
#X connect 6 1 2 0;
#X connect 12 0 6 0;
#X connect 13 0 8 0;
#X connect 13 1 9 0;
#X connect 13 2 10 0;
#X connect 13 3 11 0;
#X connect 19 0 22 0;
#X connect 20 0 21 0;
#X connect 20 1 30 0;
#X connect 22 0 20 0;
#X connect 25 0 27 0;
#X connect 27 0 37 0;
#X connect 28 0 37 0;
#X connect 33 0 37 0;
#X connect 36 0 37 0;
#X connect 37 0 26 0;
#X connect 37 1 29 0;
#X connect 38 0 43 0;
#X connect 39 0 40 0;
#X connect 40 0 45 0;
#X connect 40 1 46 0;
#X connect 41 0 40 0;
#X connect 43 0 40 0;
#X connect 44 0 40 0;
#X connect 47 0 37 0;
#X connect 48 0 37 0;
#X restore 442 63 pd store/remove_messages;
#X obj 218 290 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 251 290 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 56 129 loadbang;
#X msg 353 174 0;
#X msg 245 191 1;
#X obj 218 261 sel 1, f 6;
#X obj 218 228 float;
#X obj 56 239 cyclone/coll if;
#C restore;
#X obj 245 166 cyclone/coll if;
#C restore;
#X obj 218 109 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 262 105 <= address;
#X obj 218 134 trigger bang float bang;
#X msg 56 167 0 3.45 \, 1 23445 \, 2 23.432 \, 3 114 \, 4 8.7736 \,
5 34, f 16;
#X text 32 35 If you send a non existing address to coll \, it will
ignore it and won't tell you that it doesn't have it. But the example
below to the right will tell you if the address is found or not.;
#X text 178 292 found;
#X text 271 291 not found;
#N canvas 602 23 655 392 renumber_addresses 0;
#X obj 152 268 cyclone/coll;
#C restore;
#X obj 175 298 print address;
#X msg 177 129 dump;
#X obj 152 325 print value;
#X msg 203 194 renumber 10;
#X msg 152 80 1 100 \, 2 200, f 6;
#X obj 152 53 loadbang;
#X msg 191 168 renumber;
#X text 250 168 from 0;
#X text 280 193 from 10;
#X msg 208 224 renumber2;
#X text 272 223 increments by 1;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 2 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X connect 7 0 0 0;
#X connect 10 0 0 0;
#X restore 460 106 pd renumber_addresses;
#N canvas 437 135 794 427 swap 0;
#X msg 366 144 dump;
#X msg 453 118 sort -1;
#X msg 489 228 dump;
#X obj 342 334 print value;
#X obj 365 313 print address;
#X msg 493 205 sort -1 3;
#X obj 438 184 cyclone/comment 100 11 helvetica ? 0 80 80 80 sort by
3rd element:;
#X msg 217 135 swap 1 2;
#X msg 417 205 sort 1 -1;
#X msg 342 68 2 two 1 5 \, 1 one 8 4 \, 3 three 2 1 \, 5 five 4 3 \,
4 four 3 2;
#X msg 359 118 sort -1 -1;
#X obj 342 263 cyclone/coll;
#C restore;
#X msg 60 187 store b 2 two 1 5;
#X msg 85 218 store a 1 one 8 4;
#X msg 99 240 store f 3 three 2 1;
#X msg 112 262 store e 5 five 4 3;
#X obj 90 327 cyclone/coll;
#C restore;
#X connect 0 0 11 0;
#X connect 1 0 11 0;
#X connect 2 0 11 0;
#X connect 5 0 11 0;
#X connect 8 0 11 0;
#X connect 9 0 11 0;
#X connect 10 0 11 0;
#X connect 11 0 3 0;
#X connect 11 1 4 0;
#X connect 12 0 16 0;
#X connect 13 0 16 0;
#X connect 14 0 16 0;
#X connect 15 0 16 0;
#X restore 515 154 pd swap \, sort;
#X text 596 107 *;
#N canvas 297 37 443 409 embbed 0;
#X msg 122 201 flags 1 0;
#X msg 125 223 flags 0 0;
#X obj 188 203 cyclone/comment 332 11 helvetica ? 0 80 80 80 save coll's
contents with the patch;
#X obj 192 225 cyclone/comment 332 11 helvetica ? 0 80 80 80 don't
save (default);
#X msg 156 250 embed;
#X obj 92 277 cyclone/coll;
#C restore;
#X connect 0 0 5 0;
#X connect 1 0 5 0;
#X restore 509 263 pd embbed;
#X msg 414 352 length;
#X msg 431 402 filetype;
#X obj 462 353 cyclone/comment 201 11 helvetica ? 0 80 80 80 outputs
Nº of messages stored;
#X obj 490 402 cyclone/comment 332 11 helvetica ? 0 80 80 80 useless
on unix it's a dummy function;
#X msg 515 434 separate;
#X msg 619 83 subsym;
#N canvas 586 133 870 615 merge 0;
#X msg 95 134 merge 2 and this was appended;
#X floatatom 132 186 5 0 0 0 - - -, f 5;
#X obj 35 402 cyclone/coll;
#C restore;
#X msg 163 316 nth 2 3;
#X obj 58 448 print address;
#X obj 35 468 print value;
#X msg 35 63 1 foo \, 2 bar \, 3 anything;
#X obj 35 42 loadbang;
#X msg 69 110 2;
#X obj 103 103 cyclone/comment 155 11 helvetica ? 0 80 80 80 merge
appends a message to an already stored one;
#X obj 169 183 cyclone/comment 100 11 helvetica ? 0 80 80 80 check
it out ...;
#X obj 175 227 cyclone/comment 153 11 helvetica ? 0 80 80 80 replace
an item (silently);
#X obj 238 265 cyclone/comment 153 11 helvetica ? 0 80 80 80 or send
it out imediately;
#X obj 192 340 cyclone/comment 280 11 helvetica ? 0 80 80 80 retrieve
3rd element of message at address 2;
#X text 41 533 merge <int/symbol \, any> -;
#X text 202 533 appends any message to an address (1st argument) -
it creates the address if it doesn't exist, f 76;
#X msg 512 282 dump;
#X msg 480 120 1 foo \, 2 bar \, 3 boo \, 4 42;
#X msg 496 165 store triad 0 4 7;
#X msg 486 143 store 333 3 6 9;
#X msg 505 236 swap 333 triad;
#X msg 502 213 nsub 333 2 7;
#X obj 476 347 cyclone/coll foo;
#C restore;
#X text 399 75 Changing and modifying elements;
#X obj 480 427 print value;
#X obj 511 405 print address;
#X obj 661 128 cyclone/comment 100 11 helvetica ? 0 80 80 80 insert
some data;
#X obj 617 221 cyclone/comment 100 11 helvetica ? 0 80 80 80 change
some data;
#X obj 560 280 cyclone/comment 100 11 helvetica ? 0 80 80 80 print
contents;
#X msg 147 243 nsub 2 3 fuck;
#X msg 162 279 sub 2 1 newer;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 1 4 0;
#X connect 3 0 2 0;
#X connect 6 0 2 0;
#X connect 7 0 6 0;
#X connect 8 0 2 0;
#X connect 16 0 22 0;
#X connect 17 0 22 0;
#X connect 18 0 22 0;
#X connect 19 0 22 0;
#X connect 20 0 22 0;
#X connect 21 0 22 0;
#X connect 22 0 24 0;
#X connect 22 1 25 0;
#X connect 29 0 2 0;
#X connect 30 0 2 0;
#X restore 418 232 pd merge nsub nth sub;
#N canvas 0 22 450 300 thread 0;
#X restore 388 431 pd thread;
#X obj 126 408 cyclone/coll coll.txt;
#C restore;
#X msg 135 355 separate 10;
#X connect 8 0 18 0;
#X connect 9 0 12 1;
#X connect 10 0 12 1;
#X connect 11 0 6 0;
#X connect 11 1 7 0;
#X connect 12 0 11 0;
#X connect 14 0 10 0;
#X connect 15 0 17 0;
#X connect 17 0 12 0;
#X connect 17 1 14 0;
#X connect 17 2 9 0;
#X connect 18 0 13 0;
#X connect 35 0 34 0;
#X restore 441 258 pd more examples;
#X text 300 197 <= recall data from address;
#X connect 29 0 60 0;
#X connect 37 0 60 0;
#X connect 57 0 60 0;
#X connect 58 0 60 0;
#X connect 60 0 30 0;
#X connect 60 1 31 0;
